'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import axios from 'axios';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Tent,
  Calendar,
  Package,
  Users,
  TrendingUp,
  Bell,
  Settings,
  LogOut,
  BarChart3,
  ShoppingCart,
  MessageCircle,
  Star,
} from 'lucide-react';
import Link from 'next/link';
import { useParams, useSearchParams } from "next/navigation"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { DialogHeader } from '@/components/ui/dialog';
import { Dialog, DialogContent, DialogTitle, DialogTrigger } from '@radix-ui/react-dialog';
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@radix-ui/react-select';
import { Input } from '@/components/ui/input';
import React from 'react';

interface Booking {
  _id: string;
  service: string;
  date: string;
  status: 'pending' | 'confirmed' | 'completed';
  amount: number;
  rating?: number;
  created_at: string;
}

interface Stat {
  title: string;
  value: string;
  change: string;
  icon: string;
  color: string;
}
interface User {
  fullname: string;
  email: string;
  role: string;
  phone?: string;
  avatar?: string;
}
interface Dish {
  id: number;
  name: string;
  category: string;
  price: number;
}
interface BillItem {
  dish: Dish;
  qty: number;
  totalPrice?: number; // t√πy backend tr·∫£ v·ªÅ
}
export default function DashboardPage() {
  const [user, setUser] = useState<{ name: string; email: string; phone?: string; role: string; avatar?: string } | null>(null);
  const [stats, setStats] = useState<Stat[]>([]);
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [pendingOrders, setPendingOrders] = useState<any[]>([]);
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [open, setOpen] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState<any | null>(null); // Add selectedOrder state
  const [search, setSearch] = useState("");
  const [categoryFilter, setCategoryFilter] = useState("ALL");
  const [dishes, setDishes] = useState<any[]>([]);
  const [selectedDishes, setSelectedDishes] = useState<any[]>([]);
  const [bill, setBill] = useState<BillItem[]>([]);
  const [filter, setFilter] = useState("ALL");
  // L∆∞u s·ªë l∆∞·ª£ng c√≤n l·∫°i trong state t·∫°m th·ªùi
  const [localQuantities, setLocalQuantities] = useState<Record<number, number>>({});




  useEffect(() => {
    const fetchData = async () => {
      console.log("üîç B·∫Øt ƒë·∫ßu fetch d·ªØ li·ªáu...");

      try {
        // L·∫•y token & userData
        const token = sessionStorage.getItem("authToken");
        const userData = sessionStorage.getItem("user");

        if (!token || !userData) {
          console.warn("‚ö†Ô∏è Kh√¥ng c√≥ token ho·∫∑c userData trong sessionStorage");
          router.push("/login");
          return;
        }

        // Parse user
        let parsedUser;
        try {
          parsedUser = JSON.parse(userData);
          setUser(parsedUser);
          console.log("‚úÖ User:", parsedUser);
        } catch (err) {
          console.error("‚ùå L·ªói parse userData:", err);
          router.push("/login");
          return;
        }

        // G·∫Øn token v√†o axios
        axios.defaults.headers.common["Authorization"] = `Bearer ${token}`;

        // Fetch orders
        console.log("üì° ƒêang g·ªçi API l·∫•y ƒë∆°n h√†ng...");

        const ordersRes = await axios.get("http://localhost:8080/apis/orders/my-orders", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        console.log("‚úÖ Orders response:", ordersRes.data);

        if (Array.isArray(ordersRes.data)) {
          setPendingOrders(ordersRes.data);
        } else {
          console.warn("‚ö†Ô∏è API tr·∫£ v·ªÅ kh√¥ng ph·∫£i m·∫£ng:", ordersRes.data);
          setPendingOrders([]);
        }
      } catch (error) {
        console.error("‚ùå L·ªói khi fetch data:", error);
        setPendingOrders([]);
      } finally {
        console.log("üèÅ Ho√†n t·∫•t fetch data");
        setIsLoading(false);
      }
    };

    fetchData();
  }, [router]);
  // L·∫•y d·ªØ li·ªáu t·ª´ backend
  useEffect(() => {
    fetch("http://localhost:8080/apis/dishes/all")
      .then((res) => res.json())
      .then((data) => setDishes(data))
      .catch((err) => console.error("Error fetching dishes:", err));
  }, []);

  // B·ªô l·ªçc m√≥n ƒÉn (k·∫øt h·ª£p search + category)
  const filteredDishes = React.useMemo(() => {
    return dishes.filter((dish: any) => {
      const matchesSearch = dish.name.toLowerCase().includes(search.toLowerCase());
      // n·∫øu ch·ªçn ALL th√¨ lu√¥n true
      if (categoryFilter === "ALL") {
        return matchesSearch;
      }

      // chu·∫©n h√≥a c·∫£ 2 v·ªÅ lowercase ƒë·ªÉ so s√°nh
      const matchesCategory =
        categoryFilter === "ALL"
          ? true
          : dish.category.toUpperCase() === categoryFilter;

      return matchesSearch && matchesCategory;
    });
  }, [dishes, search, categoryFilter]);

  // Th√™m m√≥n v√†o order
  const handleAddToOrder = (dish: any) => {
    setSelectedDishes((prev) =>
      prev.some((item) => item.id === dish.id)
        ? prev.map((item) =>
          item.id === dish.id
            ? { ...item, qty: item.qty + 1 } // ‚úÖ gi·ªØ nguy√™n field, ch·ªâ tƒÉng s·ªë l∆∞·ª£ng
            : item
        )
        : [
          ...prev,
          {
            ...dish, // ‚úÖ l·∫•y to√†n b·ªô d·ªØ li·ªáu t·ª´ dish
            qty: 1,
          },
        ]
    );
  };

  const addToBill = (dish: Dish) => {
    console.log("‚ûï addToBill:", dish.id, dish.name);

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng c√≤n l·∫°i
    if (localQuantities[dish.id] === 0) {
      alert("‚ùå M√≥n n√†y ƒë√£ h·∫øt h√†ng!");
      return;
    }

    setBill(prev => {
      const existing = prev.find(item => item.dish.id === dish.id);

      if (existing) {
        // N·∫øu th√™m v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng t·ªìn kho th√¨ ch·∫∑n
        if (existing.qty + 1 > localQuantities[dish.id]) {
          alert("‚ö†Ô∏è Kh√¥ng th·ªÉ g·ªçi qu√° s·ªë l∆∞·ª£ng t·ªìn kho!");
          return prev;
        }
        return prev.map(item =>
          item.dish.id === dish.id ? { ...item, qty: item.qty + 1 } : item
        );
      } else {
        return [...prev, { dish, qty: 1 }];
      }
    });
  };

  useEffect(() => {
    const initQuantities: Record<number, number> = {};
    dishes.forEach(dish => {
      initQuantities[dish.id] = dish.quantity; // s·ªë l∆∞·ª£ng g·ªëc t·ª´ DB
    });
    setLocalQuantities(initQuantities);
  }, [dishes]);


  // X√≥a m√≥n kh·ªèi bill
  const removeFromBill = (dishId: number) => {
    setBill(prev => prev.filter(item => item.dish.id !== dishId));
  };

  // T·ªïng ti·ªÅn
  const total = React.useMemo(() => {
    return bill.reduce((sum, item) => sum + item.dish.price * item.qty, 0);
  }, [bill]);

  const fetchDishesFromDB = async () => {
    try {
      const res = await axios.get("http://localhost:8080/apis/dishes/all");
      const dishes = res.data;

      // c·∫≠p nh·∫≠t l·∫°i localQuantities d·ª±a v√†o d·ªØ li·ªáu DB
      const updatedQuantities: Record<number, number> = {};
      dishes.forEach((dish: any) => {
        updatedQuantities[dish.id] = dish.quantity;
      });

      setLocalQuantities(updatedQuantities);
      console.log("‚úÖ ƒê·ªìng b·ªô m√≥n ƒÉn t·ª´ DB:", updatedQuantities);
    } catch (err) {
      console.error("‚ùå L·ªói fetchDishesFromDB:", err);
    }
  };


  // X√°c nh·∫≠n g·ªçi m√≥n
  const submitOrder = async () => {
    console.log("üîπ submitOrder b·∫Øt ƒë·∫ßu...");

    if (!selectedOrder) {
      alert("Vui l√≤ng ch·ªçn ƒë∆°n h√†ng tr∆∞·ªõc khi g·ªçi m√≥n!");
      return;
    }

    if (bill.length === 0) {
      alert("Ch∆∞a ch·ªçn m√≥n n√†o!");
      return;
    }

    try {
      const orderId = selectedOrder.id;

      // Chu·∫©n b·ªã payload cho backend
      const payload = bill.map(item => ({
        dishId: item.dish.id,
        quantity: item.qty
      }));

      console.log("üì¶ Payload g·ª≠i l√™n backend:", payload);

      // G·ªçi API add dishes
      const res = await axios.post(
        `http://localhost:8080/apis/orders/${orderId}/add-dishes`,
        payload
      );

      console.log("‚úÖ Th√™m m√≥n backend response:", res.data);

      alert("‚úÖ Th√™m m√≥n th√†nh c√¥ng!");

      // --- B∆∞·ªõc 1: tr·ª´ s·ªë l∆∞·ª£ng t·ªìn kho local theo bill
      setLocalQuantities(prev => {
        const updated = { ...prev };
        bill.forEach(item => {
          updated[item.dish.id] = Math.max(0, updated[item.dish.id] - item.qty);
        });
        return updated;
      });

      // --- B∆∞·ªõc 2: reset bill b√™n customer
      setBill([]);

      // --- B∆∞·ªõc 3: gi·ªØ selectedOrder kh√¥ng ƒë·ªïi (ch·ªâ trigger render l·∫°i)
      setSelectedOrder((prev: any) => (prev ? { ...prev } : null));

      // --- B∆∞·ªõc 4: refresh dishes t·ª´ DB ƒë·ªÉ ƒë·ªìng b·ªô ch√≠nh x√°c
      fetchDishesFromDB();

    } catch (err: any) {
      console.error("‚ùå submitOrder error:", err);
      if (err.response) {
        alert(`L·ªói server: ${err.response.status} - ${JSON.stringify(err.response.data)}`);
      } else if (err.request) {
        alert("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server. Ki·ªÉm tra k·∫øt n·ªëi ho·∫∑c server.");
      } else {
        alert("L·ªói kh√¥ng mong ƒë·ª£i: " + (err.message || err));
      }
    }

    console.log("üîπ submitOrder k·∫øt th√∫c");
  };




  // ====== Khi m·ªü modal g·ªçi m√≥n ======
  const openBillModal = (order: any) => {
    setSelectedOrder(order);
    setOpen(true);
    setBill([]); // reset bill n·∫øu mu·ªën b·∫Øt ƒë·∫ßu m·ªõi
  };







  //handleLogout
  // const handleLogout = () => {
  //   localStorage.removeItem('authToken');
  //   localStorage.removeItem('user');
  //   sessionStorage.removeItem('authToken');
  //   sessionStorage.removeItem('user');
  //   router.push('/login');
  // };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'confirmed':
        return <Badge className="bg-green-100 text-green-800">ƒê√£ x√°c nh·∫≠n</Badge>;
      case 'completed':
        return <Badge className="bg-blue-100 text-blue-800">Ho√†n th√†nh</Badge>;
      case 'pending':
        return <Badge className="bg-yellow-100 text-yellow-800">Ch·ªù x·ª≠ l√Ω</Badge>;
      default:
        return <Badge variant="secondary">Kh√¥ng x√°c ƒë·ªãnh</Badge>;
    }
  };
  function generateOrderCode(): string {
    const timestamp = Date.now().toString(36).toUpperCase();
    const randomStr = Math.random().toString(36).substring(2, 6).toUpperCase();
    return `#OGC${timestamp}${randomStr}`;
  }
  if (isLoading) {
    return <div className="min-h-screen flex items-center justify-center">ƒêang t·∫£i...</div>;
  }

  if (!user) {
    return null; // Redirect handled in useEffect
  }

  const iconMap: { [key: string]: any } = {
    Calendar,
    Package,
    Users,
    ShoppingCart,
    TrendingUp,
    Star,
  };

  function formatToVNTime(isoString: string) {
    return new Date(isoString).toLocaleString("vi-VN", {
      timeZone: "Asia/Ho_Chi_Minh",
      hour: "2-digit",
      minute: "2-digit",
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
  }



  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header
      <header className="border-b bg-white sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <Link href="/" className="flex items-center gap-2">
            <Tent className="h-8 w-8 text-green-600" />
            <span className="text-2xl font-bold text-green-800">OG Camping</span>
          </Link>
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm">
              <Bell className="w-4 h-4" />
            </Button>
            <Button variant="ghost" size="sm">
              <Settings className="w-4 h-4" />
            </Button>
            <Avatar>
              <AvatarImage src={user.avatar || '/user-avatar.png'} />
              <AvatarFallback>{user.name?.[0] || 'JD'}</AvatarFallback>
            </Avatar>
            <Button variant="ghost" size="sm" onClick={handleLogout}>
              <LogOut className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </header> */}

      <div className="container mx-auto px-4 py-8">
        {/* Welcome Section */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Ch√†o m·ª´ng tr·ªü l·∫°i, {user.name}!</h1>
          <p className="text-gray-600">
            {user.role === 'admin'
              ? 'Qu·∫£n l√Ω h·ªá th·ªëng OG Camping c·ªßa b·∫°n'
              : 'Qu·∫£n l√Ω c√°c chuy·∫øn c·∫Øm tr·∫°i v√† thi·∫øt b·ªã c·ªßa b·∫°n'}
          </p>
        </div>

        {/* Stats Cards */}
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {stats.map((stat, index) => {
            const Icon = iconMap[stat.icon];
            return (
              <Card key={index} className="hover:shadow-lg transition-shadow">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">{stat.title}</p>
                      <p className="text-3xl font-bold text-gray-900">{stat.value}</p>
                    </div>
                    {Icon && <Icon className={`w-8 h-8 ${stat.color}`} />}
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {/* Main Content */}
        <Tabs defaultValue="overview" className="space-y-6">
          <TabsList className="grid w-full lg:w-auto grid-cols-4">
            <TabsTrigger value="overview">T·ªïng quan</TabsTrigger>
            <TabsTrigger value="bookings">ƒê·∫∑t ch·ªó</TabsTrigger>
            <TabsTrigger value="equipment">Thi·∫øt b·ªã</TabsTrigger>
            <TabsTrigger value="profile">H·ªì s∆°</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-6">
            {/* Danh s√°ch ƒë∆°n h√†ng */}
            <Card>
              <CardContent>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle>Danh s√°ch ƒë∆°n h√†ng c·ªßa b·∫°n</CardTitle>
                      <CardDescription>C√°c ƒë∆°n h√†ng m√† b·∫°n ƒë√£ ƒë·∫∑t</CardDescription>
                    </div>
                  </div>
                </CardHeader>

                <div className="overflow-y-auto max-h-[500px] border rounded-md">
                  <div className="min-w-[800px]">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>ID</TableHead>
                          <TableHead>M√£ ƒë∆°n h√†ng</TableHead>
                          <TableHead>Kh√°ch h√†ng</TableHead>
                          <TableHead>Email</TableHead>
                          <TableHead>Ng√†y kh·ªüi h√†nh</TableHead>
                          <TableHead>Gi√° ƒë∆°n</TableHead>
                          <TableHead>S·ªë ƒëi·ªán tho·∫°i</TableHead>
                          <TableHead>S·ªë ng∆∞·ªùi</TableHead>
                          <TableHead>Thao t√°c</TableHead>
                        </TableRow>
                      </TableHeader>

                      <TableBody>
                        {pendingOrders && pendingOrders.length > 0 ? (
                          pendingOrders.map((order, idx) => (
                            <TableRow key={idx} className="hover:bg-gray-50">
                              <TableCell className="font-medium">{order.id}</TableCell>
                              <TableCell className="font-medium">{order.orderCode}</TableCell>
                              <TableCell className="font-medium">{order.customerName}</TableCell>
                              <TableCell className="font-medium">{order.email}</TableCell>
                              <TableCell className="font-medium">
                                {formatToVNTime(order.bookingDate)}
                              </TableCell>
                              <TableCell className="font-medium text-green-600">
                                {order.totalPrice
                                  ? order.totalPrice.toLocaleString() + " ƒë"
                                  : "-"}
                              </TableCell>
                              <TableCell className="font-medium">{order.phone}</TableCell>
                              <TableCell className="font-medium">{order.people}</TableCell>
                              <TableCell>
                                <Button size="sm" onClick={() => {
                                  setSelectedOrder(order);
                                  setOpen(true);
                                }}>
                                  üìã Ch·ªçn th√™m m√≥n ƒÉn
                                </Button>
                              </TableCell>
                            </TableRow>
                          ))
                        ) : (
                          <TableRow>
                            <TableCell
                              colSpan={9}
                              className="text-center text-gray-500 py-6 italic"
                            >
                              B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o
                            </TableCell>
                          </TableRow>
                        )}
                      </TableBody>
                    </Table>
                  </div>
                </div>
              </CardContent>
            </Card>


            {open && (
              <div className="fixed inset-0 flex items-center justify-center bg-black/50 z-50">
                <Card className="w-[90%] max-w-6xl h-[80%] p-6 bg-white shadow-xl rounded-2xl flex flex-col">
                  {/* Header */}
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-bold">Danh s√°ch m√≥n ƒÉn</h2>
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={() => setOpen(false)}
                    >
                      ‚ùå
                    </Button>
                  </div>

                  {/* Content */}
                  <div className="flex flex-1 gap-6 overflow-hidden">
                    {/* B·∫£ng m√≥n ƒÉn */}
                    <div className="flex-1 flex flex-col">
                      {/* Search + Filter */}
                      <div className="flex gap-4 mb-4">
                        <Input
                          placeholder="T√¨m ki·∫øm m√≥n ƒÉn..."
                          value={search}
                          onChange={(e) => setSearch(e.target.value)}
                        />
                        <select
                          value={categoryFilter}
                          onChange={(e) => setCategoryFilter(e.target.value)}
                          className="border p-2 rounded"
                        >
                          <option value="ALL">T·∫•t c·∫£</option>
                          <option value="APPETIZER">APPETIZER</option>
                          <option value="BBQ">BBQ</option>
                          <option value="HOTPOT">HOTPOT</option>
                          <option value="SNACK">SNACK</option>
                          <option value="DESSERT">DESSERT</option>
                          <option value="DRINK">DRINK</option>
                        </select>
                      </div>

                      {/* Table */}
                      <div className="flex-1 overflow-y-auto border rounded-md">
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>ID</TableHead>
                              <TableHead>H√¨nh ·∫£nh</TableHead>
                              <TableHead>T√™n m√≥n</TableHead>
                              <TableHead>Lo·∫°i</TableHead>
                              <TableHead>S·ªë l∆∞·ª£ng</TableHead>
                              <TableHead>Gi√°</TableHead>
                              <TableHead>Thao t√°c</TableHead>

                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {filteredDishes.map((dish) => (
                              <TableRow key={dish.id}>
                                <TableCell className="font-medium">{dish.id}</TableCell>
                                <TableCell>
                                  {dish.imageUrl ? (
                                    <img
                                      src={`http://localhost:8080${dish.imageUrl}`}
                                      alt={dish.name}
                                      className="w-16 h-16 object-cover rounded-md"
                                    />
                                  ) : (
                                    <span className="text-gray-400 italic">Ch∆∞a c√≥ ·∫£nh</span>
                                  )}
                                </TableCell>

                                <TableCell className="font-medium">{dish.name}</TableCell>
                                <TableCell className="font-medium">{dish.category}</TableCell>
                                <TableCell className="font-medium">{dish.quantity}</TableCell>
                                <TableCell className="font-medium">
                                  {dish.price.toLocaleString()} ƒë
                                </TableCell>
                                <TableCell className="font-medium">
                                  <Button
                                    size="sm"
                                    variant={localQuantities[dish.id] === 0 ? "destructive" : "outline"}
                                    disabled={localQuantities[dish.id] === 0}
                                    onClick={() => addToBill(dish)}
                                  >
                                    {localQuantities[dish.id] === 0 ? "SOLD OUT" : "G·ªçi m√≥n"}
                                  </Button>



                                </TableCell>


                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </div>
                    </div>

                    {/* Bill */}
                    <Card className="w-[300px] flex flex-col p-4 shadow-md">
                      <h3 className="text-lg font-semibold mb-3">H√≥a ƒë∆°n</h3>
                      <div className="flex-1 overflow-y-auto space-y-2">
                        {bill.length === 0 ? (
                          <p className="text-gray-400 italic">Ch∆∞a ch·ªçn m√≥n n√†o</p>
                        ) : (
                          bill.map((item) => (
                            <div
                              key={item.dish.id}
                              className="flex justify-between items-center border-b pb-1"
                            >
                              <div>
                                {item.dish.name}{" "}
                                <span className="text-sm text-gray-500">x{item.qty}</span>
                              </div>
                              <div className="flex items-center gap-2">
                                <span>
                                  {(item.dish.price * item.qty).toLocaleString()} ƒë
                                </span>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => removeFromBill(item.dish.id)}
                                >
                                  ‚ûñ
                                </Button>
                              </div>
                            </div>
                          ))
                        )}
                      </div>
                      <div className="mt-4 border-t pt-2">
                        <div className="flex justify-between font-semibold">
                          <span>T·ªïng:</span>
                          <span>{total.toLocaleString()} ƒë</span>
                        </div>
                        <Button className="w-full mt-2" onClick={submitOrder}>X√°c nh·∫≠n g·ªçi m√≥n</Button>
                      </div>
                    </Card>
                  </div>
                </Card>
              </div>
            )}







            {/* Thao t√°c nhanh */}
            <div className="grid md:grid-cols-2 gap-6">
              <Card className="shadow-lg rounded-2xl">
                <CardHeader>
                  <CardTitle>Thao t√°c nhanh</CardTitle>
                  <CardDescription>C√°c t√≠nh nƒÉng th∆∞·ªùng s·ª≠ d·ª•ng</CardDescription>
                </CardHeader>
                <CardContent className="space-y-3">
                  <Button className="w-full justify-start" asChild>
                    <Link href="/services">
                      <Calendar className="w-4 h-4 mr-2" />
                      ƒê·∫∑t d·ªãch v·ª• m·ªõi
                    </Link>
                  </Button>
                  <Button variant="outline" className="w-full justify-start" asChild>
                    <Link href="/equipment">
                      <Package className="w-4 h-4 mr-2" />
                      Thu√™ thi·∫øt b·ªã
                    </Link>
                  </Button>
                  <Button variant="outline" className="w-full justify-start" asChild>
                    <Link href="/ai-consultant">
                      <MessageCircle className="w-4 h-4 mr-2" />
                      T∆∞ v·∫•n AI
                    </Link>
                  </Button>
                  {user?.role === "admin" && (
                    <Button variant="outline" className="w-full justify-start" asChild>
                      <Link href="/reports">
                        <BarChart3 className="w-4 h-4 mr-2" />
                        Xem b√°o c√°o
                      </Link>
                    </Button>
                  )}
                </CardContent>
              </Card>



              {/* AI Recommendations */}

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MessageCircle className="w-5 h-5 text-green-600" />
                    G·ª£i √Ω t·ª´ AI
                  </CardTitle>
                  <CardDescription>D·ª±a tr√™n l·ªãch s·ª≠ v√† s·ªü th√≠ch c·ªßa b·∫°n</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid md:grid-cols-2 gap-4">
                    <div className="p-4 border rounded-lg bg-green-50">
                      <h4 className="font-medium text-green-800 mb-2">G√≥i ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t</h4>
                      <p className="text-sm text-green-700 mb-3">
                        C·∫Øm tr·∫°i r·ª´ng C√°t Ti√™n - ph√π h·ª£p v·ªõi s·ªü th√≠ch kh√°m ph√° thi√™n nhi√™n c·ªßa b·∫°n
                      </p>
                      <Button size="sm" variant="outline">
                        Xem chi ti·∫øt
                      </Button>
                    </div>
                    <div className="p-4 border rounded-lg bg-blue-50">
                      <h4 className="font-medium text-blue-800 mb-2">Thi·∫øt b·ªã n√™n thu√™</h4>
                      <p className="text-sm text-blue-700 mb-3">T√∫i ng·ªß cao c·∫•p - th√≠ch h·ª£p cho chuy·∫øn ƒëi n√∫i s·∫Øp t·ªõi</p>
                      <Button size="sm" variant="outline">
                        Thu√™ ngay
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>


          </TabsContent>


          <TabsContent value="bookings">
            <Card>
              <CardHeader>
                <CardTitle>L·ªãch s·ª≠ ƒë·∫∑t ch·ªó</CardTitle>
                <CardDescription>Qu·∫£n l√Ω t·∫•t c·∫£ c√°c ƒë∆°n ƒë·∫∑t d·ªãch v·ª• v√† thi·∫øt b·ªã</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8 text-gray-500">
                  <Calendar className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                  <p>T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="equipment">
            <Card>
              <CardHeader>
                <CardTitle>Thi·∫øt b·ªã ƒë√£ thu√™</CardTitle>
                <CardDescription>Theo d√µi t√¨nh tr·∫°ng thi·∫øt b·ªã v√† l·ªãch tr·∫£</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8 text-gray-500">
                  <Package className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                  <p>T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="profile">
            <Card>
              <CardHeader>
                <CardTitle>Th√¥ng tin c√° nh√¢n</CardTitle>
                <CardDescription>C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n v√† c√†i ƒë·∫∑t</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <h4 className="font-medium">H·ªç v√† t√™n</h4>
                    <p className="text-gray-600">{user.name}</p>
                  </div>
                  <div>
                    <h4 className="font-medium">Email</h4>
                    <p className="text-gray-600">{user.email}</p>
                  </div>
                  <div>
                    <h4 className="font-medium">S·ªë ƒëi·ªán tho·∫°i</h4>
                    <p className="text-gray-600">{user.phone || 'Ch∆∞a c·∫≠p nh·∫≠t'}</p>
                  </div>
                  <div>
                    <h4 className="font-medium">Vai tr√≤</h4>
                    <p className="text-gray-600">{user.role}</p>
                  </div>
                  <Button variant="outline">C·∫≠p nh·∫≠t h·ªì s∆°</Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
function fetchDishesFromDB() {
  throw new Error('Function not implemented.');
}

