// route.ts
import { NextResponse } from "next/server";
import OpenAI from "openai";

const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const BASE_URL = "http://localhost:8080/apis/v1/services";

export async function POST(req: Request) {
  try {
    const { message, history } = await req.json(); // nh·∫≠n lu√¥n history t·ª´ FE

    // g·ªçi BE ƒë·ªÉ c√≥ danh s√°ch service
    const res = await fetch(BASE_URL, { cache: "no-store" });
    const allServices = await res.json();

    // map history t·ª´ FE sang format AI hi·ªÉu
    const aiHistory = history.map((m: any) => ({
      role: m.type === "user" ? "user" : "assistant",
      content: m.content,
    }));

    // g·ªçi AI
    const completion = await client.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: `B·∫°n l√† AI t∆∞ v·∫•n d·ªãch v·ª• c·∫Øm tr·∫°i OG Camping, tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
      - ƒê√¢y l√† danh s√°ch g√≥i d·ªãch v·ª• hi·ªán c√≥: ${JSON.stringify(allServices, null, 2)}

      QUY T·∫ÆC TR·∫¢ L·ªúI:
      1. N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ d·ªãch v·ª• (gi√°, v·ªã tr√≠, s·ªë ng√†y, tag, gia ƒë√¨nh, b·∫°n b√®...), b·∫°n LU√îN tr·∫£ v·ªÅ **m·ªôt JSON h·ª£p l·ªá duy nh·∫•t** theo format:

      {
        "type": "service_request",
        "criteria": { "location": "...", "maxPrice": ..., "days": ..., "tag": "..." },
        "services": [
          { "id": ..., "name": "...", "price": ..., "location": "...", "days": ..., "tag": "..." }
        ],
        "reply": "M·ªôt c√¢u tr·∫£ l·ªùi th√¢n thi·ªán, gi·∫£i th√≠ch t·∫°i sao g√≥i n√†y ph√π h·ª£p cho kh√°ch."
      }

      2. N·∫øu ch·ªâ ch√†o h·ªèi ‚Üí tr·∫£ text t·ª± nhi√™n, KH√îNG JSON.
      3. KH√îNG d√πng t·ª´ kh√≥a 'json', KH√îNG bao b·ªçc c√¢u tr·∫£ l·ªùi b·∫±ng backtick.
      `,
        },
        ...aiHistory,
        { role: "user", content: message }, // th√™m c√¢u m·ªõi
      ],
    });

    const aiResponse = completion.choices[0].message?.content;
    let reply = "Xin l·ªói, t√¥i ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi.";
    let services: any[] = [];

    if (aiResponse) {
      try {
        const parsed = JSON.parse(aiResponse);

        if (parsed.type === "service_request") {
          // filter d·ªãch v·ª•
          services = allServices.filter((s: any) => {
            const matchPrice =
              !parsed.criteria?.maxPrice || s.price <= parsed.criteria.maxPrice;
            const matchLocation =
              !parsed.criteria?.location ||
              (s.location &&
                s.location
                  .toLowerCase()
                  .includes(parsed.criteria.location.toLowerCase()));
            const matchDays =
              !parsed.criteria?.days || s.days === parsed.criteria.days;
            const matchTag =
              !parsed.criteria?.tag ||
              (s.tag &&
                s.tag.toLowerCase() === parsed.criteria.tag.toLowerCase());
            return matchPrice && matchLocation && matchDays && matchTag;
          });

          reply =
            parsed.reply ||
            (services.length > 0
              ? `M√¨nh t√¨m ƒë∆∞·ª£c ${services.length} g√≥i ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n üëá`
              : "Hi·ªán ch∆∞a c√≥ g√≥i n√†o theo ti√™u ch√≠ n√†y.");
        } else {
          reply = parsed.content || "Xin l·ªói, t√¥i ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi.";
        }
      } catch {
        // parse l·ªói ‚Üí text th∆∞·ªùng
        reply = aiResponse;
      }
    }

    return NextResponse.json({ reply, services });
  } catch (error) {
    console.error(error);
    return NextResponse.json(
      { reply: "C√≥ l·ªói x·∫£y ra khi g·ªçi AI." },
      { status: 500 }
    );
  }
}
